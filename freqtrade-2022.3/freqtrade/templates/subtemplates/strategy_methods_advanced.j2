
def bot_loop_start(self, **kwargs) -> None:
    """
    Called at the start of the bot iteration (one loop).
    Might be used to perform pair-independent tasks
    (e.g. gather some remote ressource for comparison)

    For full documentation please go to https://www.freqtrade.io/en/latest/strategy-advanced/

    When not implemented by a strategy, this simply does nothing.
    :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.
    """
    pass

def custom_entry_price(self, pair: str, current_time: 'datetime', proposed_rate: float,
                       entry_tag: 'Optional[str]', **kwargs) -> float:
    """
    Custom entry price logic, returning the new entry price.

    For full documentation please go to https://www.freqtrade.io/en/latest/strategy-advanced/

    When not implemented by a strategy, returns None, orderbook is used to set entry price

    :param pair: Pair that's currently analyzed
    :param current_time: datetime object, containing the current datetime
    :param proposed_rate: Rate, calculated based on pricing settings in ask_strategy.
    :param entry_tag: Optional entry_tag (buy_tag) if provided with the buy signal.
    :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.
    :return float: New entry price value if provided
    """
    return proposed_rate

def custom_exit_price(self, pair: str, trade: 'Trade',
                      current_time: 'datetime', proposed_rate: float,
                      current_profit: float, **kwargs) -> float:
    """
    Custom exit price logic, returning the new exit price.

    For full documentation please go to https://www.freqtrade.io/en/latest/strategy-advanced/

    When not implemented by a strategy, returns None, orderbook is used to set exit price

    :param pair: Pair that's currently analyzed
    :param trade: trade object.
    :param current_time: datetime object, containing the current datetime
    :param proposed_rate: Rate, calculated based on pricing settings in ask_strategy.
    :param current_profit: Current profit (as ratio), calculated based on current_rate.
    :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.
    :return float: New exit price value if provided
    """
    return proposed_rate

def custom_stake_amount(self, pair: str, current_time: 'datetime', current_rate: float,
                        proposed_stake: float, min_stake: float, max_stake: float,
                        entry_tag: 'Optional[str]', **kwargs) -> float:
    """
    Customize stake size for each new trade. This method is not called when edge module is
    enabled.

    :param pair: Pair that's currently analyzed
    :param current_time: datetime object, containing the current datetime
    :param current_rate: Rate, calculated based on pricing settings in ask_strategy.
    :param proposed_stake: A stake amount proposed by the bot.
    :param min_stake: Minimal stake size allowed by exchange.
    :param max_stake: Balance available for trading.
    :param entry_tag: Optional entry_tag (buy_tag) if provided with the buy signal.
    :return: A stake size, which is between min_stake and max_stake.
    """
    return proposed_stake

use_custom_stoploss = True

def custom_stoploss(self, pair: str, trade: 'Trade', current_time: 'datetime',
                    current_rate: float, current_profit: float, **kwargs) -> float:
    """
    Custom stoploss logic, returning the new distance relative to current_rate (as ratio).
    e.g. returning -0.05 would create a stoploss 5% below current_rate.
    The custom stoploss can never be below self.stoploss, which serves as a hard maximum loss.

    For full documentation please go to https://www.freqtrade.io/en/latest/strategy-advanced/

    When not implemented by a strategy, returns the initial stoploss value
    Only called when use_custom_stoploss is set to True.

    :param pair: Pair that's currently analyzed
    :param trade: trade object.
    :param current_time: datetime object, containing the current datetime
    :param current_rate: Rate, calculated based on pricing settings in ask_strategy.
    :param current_profit: Current profit (as ratio), calculated based on current_rate.
    :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.
    :return float: New stoploss value, relative to the current_rate
    """
    return self.stoploss

def custom_sell(self, pair: str, trade: 'Trade', current_time: 'datetime', current_rate: float,
                current_profit: float, **kwargs) -> 'Optional[Union[str, bool]]':
    """
    Custom sell signal logic indicating that specified position should be sold. Returning a
    string or True from this method is equal to setting sell signal on a candle at specified
    time. This method is not called when sell signal is set.

    This method should be overridden to create sell signals that depend on trade parameters. For
    example you could implement a sell relative to the candle when the trade was opened,
    or a custom 1:2 risk-reward ROI.

    Custom sell reason max length is 64. Exceeding characters will be removed.

    :param pair: Pair that's currently analyzed
    :param trade: trade object.
    :param current_time: datetime object, containing the current datetime
    :param current_rate: Rate, calculated based on pricing settings in ask_strategy.
    :param current_profit: Current profit (as ratio), calculated based on current_rate.
    :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.
    :return: To execute sell, return a string with custom sell reason or True. Otherwise return
    None or False.
    """
    return None

def confirm_trade_entry(self, pair: str, order_type: str, amount: float, rate: float,
                        time_in_force: str, current_time: 'datetime', entry_tag: 'Optional[str]',
                        **kwargs) -> bool:
    """
    Called right before placing a buy order.
    Timing for this function is critical, so avoid doing heavy computations or
    network requests in this method.

    For full documentation please go to https://www.freqtrade.io/en/latest/strategy-advanced/

    When not implemented by a strategy, returns True (always confirming).

    :param pair: Pair that's about to be bought.
    :param order_type: Order type (as configured in order_types). usually limit or market.
    :param amount: Amount in target (quote) currency that's going to be traded.
    :param rate: Rate that's going to be used when using limit orders
    :param time_in_force: Time in force. Defaults to GTC (Good-til-cancelled).
    :param current_time: datetime object, containing the current datetime
    :param entry_tag: Optional entry_tag (buy_tag) if provided with the buy signal.
    :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.
    :return bool: When True is returned, then the buy-order is placed on the exchange.
        False aborts the process
    """
    return True

def confirm_trade_exit(self, pair: str, trade: 'Trade', order_type: str, amount: float,
                       rate: float, time_in_force: str, sell_reason: str,
                       current_time: 'datetime', **kwargs) -> bool:
    """
    Called right before placing a regular sell order.
    Timing for this function is critical, so avoid doing heavy computations or
    network requests in this method.

    For full documentation please go to https://www.freqtrade.io/en/latest/strategy-advanced/

    When not implemented by a strategy, returns True (always confirming).

    :param pair: Pair that's currently analyzed
    :param trade: trade object.
    :param order_type: Order type (as configured in order_types). usually limit or market.
    :param amount: Amount in quote currency.
    :param rate: Rate that's going to be used when using limit orders
    :param time_in_force: Time in force. Defaults to GTC (Good-til-cancelled).
    :param sell_reason: Sell reason.
        Can be any of ['roi', 'stop_loss', 'stoploss_on_exchange', 'trailing_stop_loss',
                        'sell_signal', 'force_sell', 'emergency_sell']
    :param current_time: datetime object, containing the current datetime
    :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.
    :return bool: When True is returned, then the sell-order is placed on the exchange.
        False aborts the process
    """
    return True

def check_buy_timeout(self, pair: str, trade: 'Trade', order: dict, **kwargs) -> bool:
    """
    Check buy timeout function callback.
    This method can be used to override the buy-timeout.
    It is called whenever a limit buy order has been created,
    and is not yet fully filled.
    Configuration options in `unfilledtimeout` will be verified before this,
    so ensure to set these timeouts high enough.

    For full documentation please go to https://www.freqtrade.io/en/latest/strategy-advanced/

    When not implemented by a strategy, this simply returns False.
    :param pair: Pair the trade is for
    :param trade: trade object.
    :param order: Order dictionary as returned from CCXT.
    :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.
    :return bool: When True is returned, then the buy-order is cancelled.
    """
    return False

def check_sell_timeout(self, pair: str, trade: 'Trade', order: dict, **kwargs) -> bool:
    """
    Check sell timeout function callback.
    This method can be used to override the sell-timeout.
    It is called whenever a limit sell order has been created,
    and is not yet fully filled.
    Configuration options in `unfilledtimeout` will be verified before this,
    so ensure to set these timeouts high enough.

    For full documentation please go to https://www.freqtrade.io/en/latest/strategy-advanced/

    When not implemented by a strategy, this simply returns False.
    :param pair: Pair the trade is for
    :param trade: trade object.
    :param order: Order dictionary as returned from CCXT.
    :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.
    :return bool: When True is returned, then the sell-order is cancelled.
    """
    return False

def adjust_trade_position(self, trade: 'Trade', current_time: 'datetime',
                          current_rate: float, current_profit: float, min_stake: float,
                          max_stake: float, **kwargs) -> 'Optional[float]':
    """
    Custom trade adjustment logic, returning the stake amount that a trade should be increased.
    This means extra buy orders with additional fees.
    Only called when `position_adjustment_enable` is set to True.

    For full documentation please go to https://www.freqtrade.io/en/latest/strategy-advanced/

    When not implemented by a strategy, returns None

    :param trade: trade object.
    :param current_time: datetime object, containing the current datetime
    :param current_rate: Current buy rate.
    :param current_profit: Current profit (as ratio), calculated based on current_rate.
    :param min_stake: Minimal stake size allowed by exchange.
    :param max_stake: Balance available for trading.
    :param **kwargs: Ensure to keep this here so updates to this won't break your strategy.
    :return float: Stake amount to adjust your trade
    """
    return None
